name: Docker Build and Deploy
on:
    push:
        branches:
            - main
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
            -   name: Checkout Repository
                uses: actions/checkout@v4

            -   name: Setup Node.js
                uses: actions/setup-node@v3
                with:
                    node-version: '18'
                    cache: 'npm'

            -   name: Deploy to Server
                uses: easingthemes/ssh-deploy@main
                env: # Or as an environment variable
                    DATABASE_URL: ${{ secrets.DATABASE_URL }}
                with:
                    SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
                    REMOTE_HOST: ec2-52-91-88-184.compute-1.amazonaws.com
                    REMOTE_USER: ec2-user
                    # REMOTE_HOST: ${{ secrets.HOST_DNS }}
                    # REMOTE_USER: ${{ secrets.USERNAME }}
        
                    SCRIPT_AFTER: |

                        # Stop and remove existing container
                        remove_container() {
                          local CONTAINER_NAME=$1
                          local container_id=$(docker ps -aq --filter "name=$CONTAINER_NAME")
                          if [ -n "$container_id" ]; then
                            echo "Container with name '$CONTAINER_NAME' found. Stopping and removing the container..."
                            docker stop $container_id
                            docker rm $container_id
                            echo "Container '$CONTAINER_NAME' has been stopped and removed."
                          else
                            echo "No container with name '$CONTAINER_NAME' found."
                          fi
                        }

                        # Function to remove a Docker image by name
                        remove_image() {
                          local IMAGE_NAME=$1
                          docker images -q $IMAGE_NAME | grep -q . && docker rmi --force $IMAGE_NAME || true
                        }

                        # Remove lint_api container and image
                        remove_container "lint_api"
                        remove_image "lint_api:latest"

                        # Remove caddy container and image
                        remove_container "caddy"
                        remove_image "caddy:latest"

                        # Run docker-compose down with volumes
                        docker-compose down --volumes

                        # Run docker-compose up
                        docker-compose up



